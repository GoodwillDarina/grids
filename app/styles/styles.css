html,
body {
  width: 100%;
  height: 100%;
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
  font-family: 'PT Sans Narrow', Arial, sans-serif;
}
html *,
body * {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}
.code {
  display: none;
  font-size: 24px;
  line-height: 1.5;
}
.code.show {
  display: block;
}
.landing {
  max-width: 1240px;
  width: 100%;
  margin: auto;
  padding: 20px;
}
.title {
  text-align: center;
  margin: 50px auto;
  text-transform: uppercase;
  font-size: 28px;
  font-weight: normal;
  letter-spacing: 0.8px;
  color: #0f0f0f;
}
.layout-box {
  width: 100%;
  padding: 0;
  margin: 40px 0;
}
.layout-item {
  padding: 10px;
  border: 2px solid #2a862a;
  font-size: 20px;
  border-radius: 3px;
  list-style: none;
  background: rgba(42,134,42,0.5);
}
.actions {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-pack: center;
  -moz-box-pack: center;
  -o-box-pack: center;
  -ms-flex-pack: center;
  -webkit-justify-content: center;
  justify-content: center;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -o-box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
  padding: 0;
  margin: 20px 0 0;
}
.actions .btn {
  margin: 10px;
}
.btn {
  width: auto;
  padding: 10px 20px;
  border: solid 1px transparent;
  font-size: 14px;
  line-height: 1;
  text-decoration: none;
  text-transform: uppercase;
  color: #fff;
  border-radius: 3px;
  outline: none;
  cursor: pointer;
  -webkit-transition: all 0.25s;
  -moz-transition: all 0.25s;
  -o-transition: all 0.25s;
  -ms-transition: all 0.25s;
  transition: all 0.25s;
  background-color: #737373;
}
.btn:hover {
  background-color: #b53231;
}
.btn:active {
  opacity: 0.5;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=50)";
  filter: alpha(opacity=50);
}
.btn-current {
  border-color: #d05150;
  background-color: #d05150;
  -webkit-transform: scale(1.1);
  -moz-transform: scale(1.1);
  -o-transform: scale(1.1);
  -ms-transform: scale(1.1);
  transform: scale(1.1);
}
.flexbox {
  display: -webkit-box;
  display: -moz-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: box;
  display: flex;
  -webkit-box-pack: justify;
  -moz-box-pack: justify;
  -o-box-pack: justify;
  -ms-flex-pack: justify;
  -webkit-justify-content: space-between;
  justify-content: space-between;
  -webkit-box-align: center;
  -moz-box-align: center;
  -o-box-align: center;
  -ms-flex-align: center;
  -webkit-align-items: center;
  align-items: center;
  -webkit-box-lines: multiple;
  -moz-box-lines: multiple;
  -o-box-lines: multiple;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}
.flexbox > * {
  width: calc(25% - 20px);
  margin: 0 10px 20px;
}
.floats {
  clear: both;
}
.floats::before,
.floats::after {
  content: '';
  display: block;
  clear: both;
}
.floats > * {
  float: left;
  width: calc(25% - 20px);
  margin: 0 10px 20px;
}
.grids {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  grid-gap: 20px;
  padding: 0 10px;
}
.inline-block {
  font-size: 0;
}
.inline-block > * {
  display: inline-block;
  vertical-align: middle;
  width: calc(25% - 20px);
  margin: 0 10px 20px;
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
